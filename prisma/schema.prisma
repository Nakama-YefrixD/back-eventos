generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}


model usuusuarios {
    usuid                       Int                           @id @default(autoincrement()) @db.UnsignedInt
    tpuid                       Int                           @db.UnsignedInt
    usutipo_documento_identidad String?                       @db.VarChar(15)
    usunumero_dni               String?                       @db.VarChar(20)
    usucodigo_ucs               String?                       @db.VarChar(255)
    usufecha_nacimiento         String?                       @db.VarChar(50)
    usucelular                  String?                       @db.VarChar(20)
    usurol                      String?                       @db.VarChar(255)
    usunombre                   String?                       @db.VarChar(255)
    usuapell_paterno            String?                       @db.VarChar(255)
    usuapell_materno            String?                       @db.VarChar(255)
    usuimagen                   String?                       @db.VarChar(255)
    usuusuario                  String?                       @db.VarChar(255)    
    usucontrasena               String?                       @db.VarChar(255)
    usutoken                    String                        @db.VarChar(255)
    usuestado                   Boolean                       @default(true)
    created_at                  DateTime?                     @default(now())
    updated_at                  DateTime?                     @updatedAt @db.Timestamp(0)
    tputiposusuarios            tputiposusuarios              @relation(fields: [tpuid], references: [tpuid], onUpdate: Restrict, map: "usuusuarios_tpuid_foreign")
    eventosusuarios             eventosusuarios[]
    asistenciaseventos          asistenciaseventos[]
}

model tputiposusuarios {
    tpuid                    Int                        @id @default(autoincrement()) @db.UnsignedInt
    tpunombre                String                     @db.VarChar(255)
    created_at               DateTime?                  @default(now())
    updated_at               DateTime?                  @updatedAt @db.Timestamp(0)
    usuusuarios              usuusuarios[]
    tuptiposusuariospermisos tuptiposusuariospermisos[]
}

model pempermisos {
  pemid                    Int                        @id @default(autoincrement()) @db.UnsignedInt
  pemnombre                String                     @db.VarChar(255)
  pemslug                  String                     @db.VarChar(255)
  pemruta                  String?                    @db.VarChar(255)
  pemespecial              Boolean                    @default(false)
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @updatedAt @db.Timestamp(0)
  tuptiposusuariospermisos tuptiposusuariospermisos[]
}

model tuptiposusuariospermisos {
  tupid            Int               @id @default(autoincrement()) @db.UnsignedInt
  pemid            Int?              @db.UnsignedInt
  tpuid            Int?              @db.UnsignedInt
  pempermisos      pempermisos?      @relation(fields: [pemid], references: [pemid], onUpdate: Restrict, map: "tuptiposusuariospermisos_pemid_foreign")
  tputiposusuarios tputiposusuarios? @relation(fields: [tpuid], references: [tpuid], onUpdate: Restrict, map: "tuptiposusuariospermisos_tpuid_foreign")
  created_at       DateTime?         @default(now())
  updated_at       DateTime?         @updatedAt @db.Timestamp(0)
}

model carreras {
  id           Int          @id @default(autoincrement()) @db.UnsignedInt
  nombre       String?      @db.VarChar(150)
  created_at   DateTime?    @default(now())
  updated_at   DateTime?    @updatedAt @db.Timestamp(0)
  eventos      eventos[]
}

model eventos {
  id                    Int             @id @default(autoincrement()) @db.UnsignedInt
  carrera               Int?            @db.UnsignedInt
  recurrente            Boolean         @default(false)
  codigo                String?         @db.VarChar(50)
  tipoensenanza         String?         @db.VarChar(50)
  clasificacionevento   String?         @db.VarChar(50)
  tipoevento            String?         @db.VarChar(50)
  organizacion          String?         @db.VarChar(150)
  zoom                  String?         @db.VarChar(150)
  linkflyer             String?         @db.VarChar(150)
  sede                  String?         @db.VarChar(150)
  auditoria             String?         @db.VarChar(150)
  nombre                String?         @db.VarChar(150)
  estado                Boolean         @default(true)
  cupos                 Int?            @db.Int()
  hrsextracurriculares  Int?            @db.Int()
  created_at            DateTime?       @default(now())
  updated_at            DateTime?       @updatedAt @db.Timestamp(0)
  carreras              carreras?       @relation(fields: [carrera], references: [id], onUpdate: Restrict, map: "eventos_carrera_id_foreign")
  fechaseventos         fechaseventos[]
  eventosusuarios       eventosusuarios[]
  asistenciaseventos    asistenciaseventos[]
}

model fechaseventos {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  idevento      Int?         @db.UnsignedInt
  fechora       String?      @db.VarChar(50)
  fecha         String?      @db.VarChar(50)
  hora          String?      @db.VarChar(50)
  created_at    DateTime?    @default(now())
  updated_at    DateTime?    @updatedAt @db.Timestamp(0)
  eventos       eventos?     @relation(fields: [idevento], references: [id], onUpdate: Restrict, map: "fechaseventos_evento_id_foreign")
  asistenciaseventos    asistenciaseventos[]
}

model ponenteseventos {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  idevento      Int?         @db.UnsignedInt
  ponente       String?      @db.VarChar(150)
  created_at    DateTime?    @default(now())
  updated_at    DateTime?    @updatedAt @db.Timestamp(0)
}

model eventosusuarios {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  usuid         Int?         @db.UnsignedInt
  idevento      Int?         @db.UnsignedInt
  certificado   String?      @db.VarChar(250)
  encuestado    Boolean      @default(false)
  created_at    DateTime?    @default(now())
  updated_at    DateTime?    @updatedAt @db.Timestamp(0)
  eventos       eventos?     @relation(fields: [idevento], references: [id], onUpdate: Restrict, map: "eventosusuarios_evento_id_foreign")
  usuusuarios   usuusuarios? @relation(fields: [usuid], references: [usuid], onUpdate: Restrict, map: "eventosusuarios_usuid_foreign")
}

model asistenciaseventos {
  id                Int            @id @default(autoincrement()) @db.UnsignedInt
  usuid             Int?           @db.UnsignedInt
  idevento          Int?           @db.UnsignedInt
  id_fec_event      Int?           @db.UnsignedInt
  codigoevento      String?        @db.VarChar(50)
  codigoestudiante  String?        @db.VarChar(250)
  fecha             String?        @db.VarChar(20)
  asistio           Boolean        @default(false)
  created_at        DateTime?      @default(now())
  updated_at        DateTime?      @updatedAt @db.Timestamp(0)
  eventos           eventos?       @relation(fields: [idevento], references: [id], onUpdate: Restrict, map: "asistenciaseventos_evento_id_foreign")
  fechaseventos     fechaseventos? @relation(fields: [id_fec_event], references: [id], onUpdate: Restrict, map: "asistenciaseventos_fechaseventos_id_foreign")
  usuusuarios       usuusuarios?   @relation(fields: [usuid], references: [usuid], onUpdate: Restrict, map: "asistenciaseventos_usuid_foreign")
}